{"ast":null,"code":"import _slicedToArray from \"/Users/manish./Desktop/WebDev/whatsapp-socketio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useMemo, useState, createContext, useContext } from \"react\";\nimport { ssrWindow } from \"./mock-window\";\nimport { ssrDocument } from \"./mock-document\";\nvar mockEnv = {\n  window: ssrWindow,\n  document: ssrDocument\n};\nvar defaultEnv = typeof window !== \"undefined\" ? {\n  window: window,\n  document: document\n} : mockEnv;\nvar EnvironmentContext = /*#__PURE__*/createContext(defaultEnv);\nEnvironmentContext.displayName = \"EnvironmentContext\";\nexport function useEnvironment() {\n  return useContext(EnvironmentContext);\n}\nexport function EnvironmentProvider(props) {\n  var children = props.children,\n      environmentProp = props.environment;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      node = _useState2[0],\n      setNode = _useState2[1];\n\n  var context = useMemo(function () {\n    var _ref;\n\n    var doc = node == null ? void 0 : node.ownerDocument;\n    var win = node == null ? void 0 : node.ownerDocument.defaultView;\n    var nodeEnv = {\n      document: doc,\n      window: win\n    };\n    var env = (_ref = environmentProp != null ? environmentProp : nodeEnv) != null ? _ref : defaultEnv;\n    return env;\n  }, [node, environmentProp]);\n  var shouldRenderChildren = node || environmentProp;\n  return /*#__PURE__*/React.createElement(EnvironmentContext.Provider, {\n    value: context\n  }, shouldRenderChildren ? children : /*#__PURE__*/React.createElement(\"span\", {\n    ref: function ref(el) {\n      if (el) setNode(el);\n    }\n  }));\n}","map":{"version":3,"sources":["../../src/env.tsx"],"names":["mockEnv","window","document","ssrDocument","defaultEnv","EnvironmentContext","createContext","useContext","environment","environmentProp","useState","context","useMemo","doc","node","win","nodeEnv","env","shouldRenderChildren","el","setNode"],"mappings":";AAAA,OAAA,KAAA,IAAA,OAAA,EAAA,QAAA,EAAA,aAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,SAAA,QAAA,eAAA;AACA,SAAA,WAAA,QAAA,iBAAA;AAOA,IAAMA,OAAO,GAAG;AACdC,EAAAA,MAAM,EADQ,SAAA;AAEdC,EAAAA,QAAQ,EAAEC;AAFI,CAAhB;AAKA,IAAMC,UAAuB,GAC3B,OAAA,MAAA,KAAA,WAAA,GAAgC;AAAEH,EAAAA,MAAF,EAAEA,MAAF;AAAUC,EAAAA,QAAAA,EAAAA;AAAV,CAAhC,GADF,OAAA;AAGA,IAAMG,kBAAkB,GAAA,aAAGC,aAAa,CAAxC,UAAwC,CAAxC;AACAD,kBAAkB,CAAlBA,WAAAA,GAAAA,oBAAAA;AAEA,OAAO,SAAA,cAAA,GAA0B;AAC/B,SAAOE,UAAU,CAAjB,kBAAiB,CAAjB;AACD;AAOD,OAAO,SAAA,mBAAA,CAAA,KAAA,EAA8D;AAAA,MAC7D,QAD6D,GACnE,KADmE,CAC7D,QAD6D;AAAA,MACpCE,eADoC,GACnE,KADmE,CACjDD,WADiD;;AAAA,kBAE3CE,QAAQ,CAAhC,IAAgC,CAFmC;AAAA;AAAA,MAE7D,IAF6D;AAAA,MAE7D,OAF6D;;AAInE,MAAMC,OAAO,GAAGC,OAAO,CAAC,YAAM;AAAA,QAAA,IAAA;;AAC5B,QAAMC,GAAG,GAAGC,IAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,IAAI,CAAhB,aAAA;AACA,QAAMC,GAAG,GAAGD,IAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,IAAI,CAAJA,aAAAA,CAAZ,WAAA;AACA,QAAME,OAAO,GAAG;AAAEd,MAAAA,QAAQ,EAAV,GAAA;AAAiBD,MAAAA,MAAM,EAAEc;AAAzB,KAAhB;AACA,QAAME,GAAG,GAAA,CAAA,IAAA,GAAGR,eAAH,IAAA,IAAGA,GAAH,eAAGA,GAAH,OAAA,KAAA,IAAA,GAAA,IAAA,GAAT,UAAA;AACA,WAAA,GAAA;AALqB,GAAA,EAMpB,CAAA,IAAA,EANH,eAMG,CANoB,CAAvB;AAQA,MAAMS,oBAAoB,GAAGJ,IAAI,IAAjC,eAAA;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,EAAA;AAA6B,IAAA,KAAK,EAAEH;AAApC,GAAA,EACGO,oBAAoB,GAAA,QAAA,GAAA,aAGnB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,IAAA,GAAG,EAAGC,aAAAA,EAAD,EAAQ;AACX,UAAA,EAAA,EAAQC,OAAO,CAAPA,EAAO,CAAPA;AACT;AAHH,GAAA,CAJJ,CADF;AAaD","sourcesContent":["import React, { useMemo, useState, createContext, useContext } from \"react\"\nimport { ssrWindow } from \"./mock-window\"\nimport { ssrDocument } from \"./mock-document\"\n\ninterface Environment {\n  window: Window\n  document: Document\n}\n\nconst mockEnv = {\n  window: ssrWindow,\n  document: ssrDocument,\n}\n\nconst defaultEnv: Environment =\n  typeof window !== \"undefined\" ? { window, document } : mockEnv\n\nconst EnvironmentContext = createContext(defaultEnv)\nEnvironmentContext.displayName = \"EnvironmentContext\"\n\nexport function useEnvironment() {\n  return useContext(EnvironmentContext)\n}\n\nexport interface EnvironmentProviderProps {\n  children: React.ReactNode\n  environment?: Environment\n}\n\nexport function EnvironmentProvider(props: EnvironmentProviderProps) {\n  const { children, environment: environmentProp } = props\n  const [node, setNode] = useState<HTMLElement | null>(null)\n\n  const context = useMemo(() => {\n    const doc = node?.ownerDocument\n    const win = node?.ownerDocument.defaultView\n    const nodeEnv = { document: doc, window: win }\n    const env = environmentProp ?? nodeEnv ?? defaultEnv\n    return env as Environment\n  }, [node, environmentProp])\n\n  const shouldRenderChildren = node || environmentProp\n\n  return (\n    <EnvironmentContext.Provider value={context}>\n      {shouldRenderChildren ? (\n        children\n      ) : (\n        <span\n          ref={(el) => {\n            if (el) setNode(el)\n          }}\n        />\n      )}\n    </EnvironmentContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}