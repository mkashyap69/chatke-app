{"ast":null,"code":"var _jsxFileName = \"/Users/manish./Desktop/WebDev/whatsapp-socketio/client/src/components/ChatArea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChatProfileBar from './ChatProfileBar';\nimport ChatAreaMessages from './ChatAreaMessages';\nimport ChatAreaInput from './ChatAreaInput';\nimport { io } from 'socket.io-client';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { getMsgHistory, saveMsgsHistory } from '../redux/actions/msgsActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:9000/');\n\nfunction ChatArea() {\n  _s();\n\n  const [msg, setMsg] = useState('');\n  const [msgsHistory, setMsgsHistory] = useState([]);\n  const [roomName, setRoomName] = useState(null);\n  const [retrievedMsgsHistoryState, setRetrievedMsgsHistoryState] = useState([]);\n  const dispatch = useDispatch();\n  const clickedUser = useSelector(state => state.clickedUser.user);\n  const loggedInUser = useSelector(state => state.user.data.data.user);\n  const retrievedMsgsHistory = useSelector(state => {\n    var _state$msgsHistory, _state$msgsHistory$da, _state$msgsHistory$da2;\n\n    return (_state$msgsHistory = state.msgsHistory) === null || _state$msgsHistory === void 0 ? void 0 : (_state$msgsHistory$da = _state$msgsHistory.data) === null || _state$msgsHistory$da === void 0 ? void 0 : (_state$msgsHistory$da2 = _state$msgsHistory$da.data) === null || _state$msgsHistory$da2 === void 0 ? void 0 : _state$msgsHistory$da2.msgsHistory;\n  });\n  useEffect(() => {\n    socket.on('messageToUser', ({\n      message,\n      user,\n      current_time\n    }) => {\n      setMsgsHistory([...msgsHistory, {\n        message,\n        user,\n        current_time,\n        outgoing: false\n      }]);\n      dispatch(saveMsgsHistory(msgsHistory, roomName));\n    });\n    return () => {\n      socket.off('messageToUser');\n    };\n  }, [msgsHistory]);\n  useEffect(() => {\n    if (clickedUser && roomName) {\n      dispatch(getMsgHistory(roomName));\n    }\n  }, [clickedUser, roomName, msgsHistory]);\n  useEffect(() => {\n    setRetrievedMsgsHistoryState(retrievedMsgsHistory);\n    console.log(retrievedMsgsHistoryState);\n  }, [retrievedMsgsHistory]);\n  useEffect(() => {\n    const clickedUserUserId = clickedUser === null || clickedUser === void 0 ? void 0 : clickedUser.userId;\n    if (typeof clickedUserUserId === 'undefined') return;else {\n      const loggedInUserUserId = loggedInUser.userId;\n      let roomName = parseInt(loggedInUserUserId, 24) * parseInt(clickedUserUserId, 24);\n      setRoomName(roomName);\n      socket.emit('roomNameToJoin', roomName);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedUser]);\n\n  const onSend = e => {\n    if (msg === '') {\n      return;\n    }\n\n    let current_time = moment().format('HH:mm');\n    setMsgsHistory([...msgsHistory, {\n      message: msg,\n      user: loggedInUser.userId,\n      current_time,\n      outgoing: true\n    }]);\n    setMsg('');\n  };\n\n  const onChange = e => {\n    setMsg(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-area\",\n    children: [/*#__PURE__*/_jsxDEV(ChatProfileBar, {\n      user: clickedUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatAreaMessages, {\n      msgs: msgsHistory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatAreaInput, {\n      onSend: onSend,\n      msg: msg,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatArea, \"eWX/d/YoN7hYtqUkrKD75h+k3qw=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = ChatArea;\nexport default ChatArea;\n/*\n \n\n\nif (loggedInUser && clickedUser && retrievedMsgsHistory) {\n  let newMsgsHistory = retrievedMsgsHistory.concat(msgsHistory);\n  dispatch(\n    saveMsgsHistory(newMsgsHistory, loggedInUser?._id, clickedUser?._id)\n  );\n}*/\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"sources":["/Users/manish./Desktop/WebDev/whatsapp-socketio/client/src/components/ChatArea.js"],"names":["React","useState","useEffect","ChatProfileBar","ChatAreaMessages","ChatAreaInput","io","useDispatch","useSelector","moment","getMsgHistory","saveMsgsHistory","socket","ChatArea","msg","setMsg","msgsHistory","setMsgsHistory","roomName","setRoomName","retrievedMsgsHistoryState","setRetrievedMsgsHistoryState","dispatch","clickedUser","state","user","loggedInUser","data","retrievedMsgsHistory","on","message","current_time","outgoing","off","console","log","clickedUserUserId","userId","loggedInUserUserId","parseInt","emit","onSend","e","format","onChange","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChatProfileBar from './ChatProfileBar';\nimport ChatAreaMessages from './ChatAreaMessages';\nimport ChatAreaInput from './ChatAreaInput';\nimport { io } from 'socket.io-client';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { getMsgHistory, saveMsgsHistory } from '../redux/actions/msgsActions';\nconst socket = io('http://localhost:9000/');\n\nfunction ChatArea() {\n  const [msg, setMsg] = useState('');\n  const [msgsHistory, setMsgsHistory] = useState([]);\n  const [roomName, setRoomName] = useState(null);\n  const [retrievedMsgsHistoryState, setRetrievedMsgsHistoryState] = useState(\n    []\n  );\n  const dispatch = useDispatch();\n\n  const clickedUser = useSelector((state) => state.clickedUser.user);\n  const loggedInUser = useSelector((state) => state.user.data.data.user);\n  const retrievedMsgsHistory = useSelector(\n    (state) => state.msgsHistory?.data?.data?.msgsHistory\n  );\n\n  useEffect(() => {\n    socket.on('messageToUser', ({ message, user, current_time }) => {\n      setMsgsHistory([\n        ...msgsHistory,\n        { message, user, current_time, outgoing: false },\n      ]);\n\n      dispatch(saveMsgsHistory(msgsHistory, roomName));\n    });\n\n    return () => {\n      socket.off('messageToUser');\n    };\n  }, [msgsHistory]);\n\n  useEffect(() => {\n    if (clickedUser && roomName) {\n      dispatch(getMsgHistory(roomName));\n    }\n  }, [clickedUser, roomName, msgsHistory]);\n\n  useEffect(() => {\n    setRetrievedMsgsHistoryState(retrievedMsgsHistory);\n    console.log(retrievedMsgsHistoryState);\n  }, [retrievedMsgsHistory]);\n\n  useEffect(() => {\n    const clickedUserUserId = clickedUser?.userId;\n    if (typeof clickedUserUserId === 'undefined') return;\n    else {\n      const loggedInUserUserId = loggedInUser.userId;\n\n      let roomName =\n        parseInt(loggedInUserUserId, 24) * parseInt(clickedUserUserId, 24);\n      setRoomName(roomName);\n      socket.emit('roomNameToJoin', roomName);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedUser]);\n\n  const onSend = (e) => {\n    if (msg === '') {\n      return;\n    }\n\n    let current_time = moment().format('HH:mm');\n\n    setMsgsHistory([\n      ...msgsHistory,\n\n      {\n        message: msg,\n        user: loggedInUser.userId,\n        current_time,\n        outgoing: true,\n      },\n    ]);\n    setMsg('');\n  };\n\n  const onChange = (e) => {\n    setMsg(e.target.value);\n  };\n\n  return (\n    <div className=\"chat-area\">\n      <ChatProfileBar user={clickedUser} />\n      <ChatAreaMessages msgs={msgsHistory} />\n      <ChatAreaInput onSend={onSend} msg={msg} onChange={onChange} />\n    </div>\n  );\n}\n\nexport default ChatArea;\n\n/*\n \n\n\nif (loggedInUser && clickedUser && retrievedMsgsHistory) {\n  let newMsgsHistory = retrievedMsgsHistory.concat(msgsHistory);\n  dispatch(\n    saveMsgsHistory(newMsgsHistory, loggedInUser?._id, clickedUser?._id)\n  );\n}*/\n"]},"metadata":{},"sourceType":"module"}