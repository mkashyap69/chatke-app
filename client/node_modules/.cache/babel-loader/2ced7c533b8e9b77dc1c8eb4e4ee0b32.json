{"ast":null,"code":"var _jsxFileName = \"/Users/manish./Desktop/WebDev/whatsapp-socketio/client/src/components/ChatArea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChatProfileBar from './ChatProfileBar';\nimport ChatAreaMessages from './ChatAreaMessages';\nimport ChatAreaInput from './ChatAreaInput';\nimport { io } from 'socket.io-client';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { getMsgHistory, saveMsgsHistory } from '../redux/actions/msgsActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:9000/');\n\nfunction ChatArea() {\n  _s();\n\n  const [msg, setMsg] = useState('');\n  const [msgsHistory, setMsgsHistory] = useState([]);\n  const [newMsgsHistory, setNewMsgsHistory] = useState([]);\n  const dispatch = useDispatch();\n  const clickedUser = useSelector(state => state.clickedUser.user);\n  const loggedInUser = useSelector(state => state.user.data.data.user);\n  const retrievedMsgsHistory = useSelector(state => {\n    var _state$msgsHistory, _state$msgsHistory$da, _state$msgsHistory$da2;\n\n    return state === null || state === void 0 ? void 0 : (_state$msgsHistory = state.msgsHistory) === null || _state$msgsHistory === void 0 ? void 0 : (_state$msgsHistory$da = _state$msgsHistory.data) === null || _state$msgsHistory$da === void 0 ? void 0 : (_state$msgsHistory$da2 = _state$msgsHistory$da.data) === null || _state$msgsHistory$da2 === void 0 ? void 0 : _state$msgsHistory$da2.msgsHistory;\n  });\n  set;\n\n  const onChange = e => {\n    setMsg(e.target.value);\n  };\n\n  useEffect(() => {\n    socket.on('messageToUser', ({\n      message,\n      user,\n      current_time\n    }) => {\n      setMsgsHistory([...msgsHistory, {\n        message,\n        user,\n        current_time,\n        outgoing: false\n      }]);\n\n      if (loggedInUser && clickedUser && retrievedMsgsHistory) {\n        console.log(retrievedMsgsHistory, msgsHistory);\n        retrievedMsgsHistory.concat(msgsHistory);\n        dispatch(saveMsgsHistory(retrievedMsgsHistory, loggedInUser === null || loggedInUser === void 0 ? void 0 : loggedInUser._id, clickedUser === null || clickedUser === void 0 ? void 0 : clickedUser._id));\n        dispatch(getMsgHistory(clickedUser === null || clickedUser === void 0 ? void 0 : clickedUser._id));\n      }\n    });\n    return () => {\n      socket.off('messageToUser');\n    };\n  }, [msgsHistory, retrievedMsgsHistory]);\n  useEffect(() => {\n    const clickedUserUserId = clickedUser === null || clickedUser === void 0 ? void 0 : clickedUser.userId;\n    if (typeof clickedUserUserId === 'undefined') return;else {\n      const loggedInUserUserId = loggedInUser.userId;\n      let roomName = parseInt(loggedInUserUserId, 24) * parseInt(clickedUserUserId, 24);\n      socket.emit('roomNameToJoin', roomName);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedUser]);\n\n  const onSend = e => {\n    if (msg === '') {\n      return;\n    }\n\n    socket.emit('message', {\n      message: msg,\n      user: loggedInUser.userId\n    });\n    let current_time = moment().format('HH:mm');\n    setMsgsHistory([...msgsHistory, {\n      message: msg,\n      user: loggedInUser.userId,\n      current_time,\n      outgoing: true\n    }]);\n    setMsg('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-area\",\n    children: [/*#__PURE__*/_jsxDEV(ChatProfileBar, {\n      user: clickedUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatAreaMessages, {\n      msgs: retrievedMsgsHistory ? retrievedMsgsHistory : []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatAreaInput, {\n      onSend: onSend,\n      msg: msg,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatArea, \"/CnFO0XEfR11mLslM9qFuxqv1OI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = ChatArea;\nexport default ChatArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"sources":["/Users/manish./Desktop/WebDev/whatsapp-socketio/client/src/components/ChatArea.js"],"names":["React","useState","useEffect","ChatProfileBar","ChatAreaMessages","ChatAreaInput","io","useDispatch","useSelector","moment","getMsgHistory","saveMsgsHistory","socket","ChatArea","msg","setMsg","msgsHistory","setMsgsHistory","newMsgsHistory","setNewMsgsHistory","dispatch","clickedUser","state","user","loggedInUser","data","retrievedMsgsHistory","set","onChange","e","target","value","on","message","current_time","outgoing","console","log","concat","_id","off","clickedUserUserId","userId","loggedInUserUserId","roomName","parseInt","emit","onSend","format"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport ChatProfileBar from './ChatProfileBar';\nimport ChatAreaMessages from './ChatAreaMessages';\nimport ChatAreaInput from './ChatAreaInput';\nimport { io } from 'socket.io-client';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { getMsgHistory, saveMsgsHistory } from '../redux/actions/msgsActions';\nconst socket = io('http://localhost:9000/');\n\nfunction ChatArea() {\n  const [msg, setMsg] = useState('');\n  const [msgsHistory, setMsgsHistory] = useState([]);\n  const [newMsgsHistory, setNewMsgsHistory] = useState([]);\n  const dispatch = useDispatch();\n\n  const clickedUser = useSelector((state) => state.clickedUser.user);\n  const loggedInUser = useSelector((state) => state.user.data.data.user);\n  const retrievedMsgsHistory = useSelector(\n    (state) => state?.msgsHistory?.data?.data?.msgsHistory\n  );\n  set\n\n  const onChange = (e) => {\n    setMsg(e.target.value);\n  };\n\n  useEffect(() => {\n    socket.on('messageToUser', ({ message, user, current_time }) => {\n      setMsgsHistory([\n        ...msgsHistory,\n        { message, user, current_time, outgoing: false },\n      ]);\n      if (loggedInUser && clickedUser && retrievedMsgsHistory) {\n        console.log(retrievedMsgsHistory, msgsHistory);\n        retrievedMsgsHistory.concat(msgsHistory);\n        dispatch(\n          saveMsgsHistory(\n            retrievedMsgsHistory,\n            loggedInUser?._id,\n            clickedUser?._id\n          )\n        );\n        dispatch(getMsgHistory(clickedUser?._id));\n      }\n    });\n\n    return () => {\n      socket.off('messageToUser');\n    };\n  }, [msgsHistory, retrievedMsgsHistory]);\n\n  useEffect(() => {\n    const clickedUserUserId = clickedUser?.userId;\n    if (typeof clickedUserUserId === 'undefined') return;\n    else {\n      const loggedInUserUserId = loggedInUser.userId;\n\n      let roomName =\n        parseInt(loggedInUserUserId, 24) * parseInt(clickedUserUserId, 24);\n      socket.emit('roomNameToJoin', roomName);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedUser]);\n\n  const onSend = (e) => {\n    if (msg === '') {\n      return;\n    }\n    socket.emit('message', { message: msg, user: loggedInUser.userId });\n\n    let current_time = moment().format('HH:mm');\n\n    setMsgsHistory([\n      ...msgsHistory,\n\n      {\n        message: msg,\n        user: loggedInUser.userId,\n        current_time,\n        outgoing: true,\n      },\n    ]);\n    setMsg('');\n  };\n\n  return (\n    <div className=\"chat-area\">\n      <ChatProfileBar user={clickedUser} />\n      <ChatAreaMessages\n        msgs={retrievedMsgsHistory ? retrievedMsgsHistory : []}\n      />\n      <ChatAreaInput onSend={onSend} msg={msg} onChange={onChange} />\n    </div>\n  );\n}\n\nexport default ChatArea;\n"]},"metadata":{},"sourceType":"module"}