{"ast":null,"code":"import axios from 'axios';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: 'USER_LOGIN_START'\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('http://localhost:9000/api/v1/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: 'USER_LOGIN_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'USER_LOGIN_FAILURE',\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const signup = userData => async dispatch => {\n  try {\n    dispatch({\n      type: 'USER_SIGNUP_START'\n    });\n    const config = {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('http://localhost:9000/api/v1/users/signup', userData, config);\n    dispatch({\n      type: 'USER_SIGNUP_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'USER_SIGNUP_FAILURE',\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserByUserId = userId => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: 'GET_USER_START'\n    });\n    /*let cancelToken;\n    if (typeof cancelToken != typeof undefined) {\n      cancelToken.cancel('Cancelling the previous request');\n    }\n     cancelToken = axios.CancelToken.source();*/\n    // cancelToken and source declaration\n\n    const CancelToken = axios.CancelToken;\n    let source = axios.CancelToken.source();\n    source && source.cancel('Operation canceled due to new request.'); // save the new request for cancellation\n\n    const {\n      user\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${user.data.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`http://localhost:9000/api/v1/users/${userId}`, config, {\n      cancelToken: source.token\n    });\n    dispatch({\n      type: 'GET_USER_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'GET_USER_FAILURE',\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const ClickedUser = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: 'GET_CLICKED_USER_START'\n    });\n    dispatch({\n      type: 'GET_CLICKED_USER_SUCCESS',\n      payload: user\n    });\n  } catch (error) {\n    dispatch({\n      type: 'GET_CLICKED_USER_FAILURE',\n      payload: 'Error'\n    });\n  }\n};","map":{"version":3,"sources":["/Users/manish./Desktop/WebDev/whatsapp-socketio/client/src/redux/actions/userActions.js"],"names":["axios","login","email","password","dispatch","type","config","headers","data","post","payload","error","response","message","signup","userData","getUserByUserId","userId","getState","CancelToken","source","cancel","user","Authorization","token","get","cancelToken","ClickedUser"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: 'USER_LOGIN_START',\n    });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const { data } = await axios.post(\n      'http://localhost:9000/api/v1/users/login',\n      { email, password },\n      config\n    );\n\n    dispatch({\n      type: 'USER_LOGIN_SUCCESS',\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: 'USER_LOGIN_FAILURE',\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const signup = (userData) => async (dispatch) => {\n  try {\n    dispatch({\n      type: 'USER_SIGNUP_START',\n    });\n\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n      },\n    };\n\n    const { data } = await axios.post(\n      'http://localhost:9000/api/v1/users/signup',\n      userData,\n      config\n    );\n\n    dispatch({\n      type: 'USER_SIGNUP_SUCCESS',\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: 'USER_SIGNUP_FAILURE',\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const getUserByUserId = (userId) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: 'GET_USER_START',\n    });\n    \n    /*let cancelToken;\n    if (typeof cancelToken != typeof undefined) {\n      cancelToken.cancel('Cancelling the previous request');\n    }\n\n    cancelToken = axios.CancelToken.source();*/\n\n     // cancelToken and source declaration\n\n const CancelToken = axios.CancelToken;\n let source = axios.CancelToken.source();\n\n source && source.cancel('Operation canceled due to new request.');\n\n // save the new request for cancellation\n\n    const { user } = getState();\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${user.data.token}`,\n      },\n    };\n\n    const {\n      data,\n    } = await axios.get(\n      `http://localhost:9000/api/v1/users/${userId}`,\n      config,\n      { cancelToken: source.token }\n    );\n    dispatch({\n      type: 'GET_USER_SUCCESS',\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: 'GET_USER_FAILURE',\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const ClickedUser = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: 'GET_CLICKED_USER_START',\n    });\n\n    dispatch({\n      type: 'GET_CLICKED_USER_SUCCESS',\n      payload: user,\n    });\n  } catch (error) {\n    dispatch({\n      type: 'GET_CLICKED_USER_FAILURE',\n      payload: 'Error',\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}