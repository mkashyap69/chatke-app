{"ast":null,"code":"var _jsxFileName = \"/Users/manish./Desktop/WebDev/whatsapp-socketio/client/src/components/FriendsBar.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Divider } from '@chakra-ui/layout';\nimport React, { useEffect, useState } from 'react';\nimport Friends from './Friends';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ClickedUser } from '../redux/actions/userActions';\nimport { getMsgHistory } from '../redux/actions/msgsActions';\nimport { getFriendsLastChattedWith } from '../redux/actions/friendsListAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FriendsBar({\n  onClose\n}) {\n  _s();\n\n  const searchedUser = useSelector(state => {\n    var _state$searchedUser;\n\n    return (_state$searchedUser = state.searchedUser) === null || _state$searchedUser === void 0 ? void 0 : _state$searchedUser.user;\n  });\n  const clickedUser = useSelector(state => state.clickedUser.user);\n  const [user, setUser] = useState({});\n  const dispatch = useDispatch();\n  const loggedInUser = useSelector(state => state.user.data.data.user); // const friendsList = useSelector((state) => state.friendsList.data.data);\n\n  const [roomName, setRoomName] = useState(null);\n  useEffect(() => {\n    dispatch(getFriendsLastChattedWith());\n  }, [clickedUser]);\n  useEffect(() => {\n    if (!searchedUser) {\n      setUser(null);\n    } else {\n      setUser(searchedUser.data);\n    }\n  }, [searchedUser]);\n  useEffect(() => {\n    if (clickedUser && roomName) {\n      dispatch(getMsgHistory(roomName));\n    }\n  }, [clickedUser, roomName]);\n\n  const onClickHandler = () => {\n    dispatch(ClickedUser(searchedUser.data));\n    onClose();\n    const loggedInUserUserId = loggedInUser.userId;\n    let roomName = parseInt(loggedInUserUserId, 36) * parseInt(searchedUser.data.userId, 36);\n    setRoomName(roomName);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"friends-bar\",\n    children: user ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"friends-bar-single1\",\n      onClick: onClickHandler,\n      children: [/*#__PURE__*/_jsxDEV(Friends, {\n        name: user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FriendsBar, \"8bqTjT3Vi7gcRrsngg3cdXtyVpI=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useSelector];\n});\n\n_c = FriendsBar;\nexport default FriendsBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"FriendsBar\");","map":{"version":3,"sources":["/Users/manish./Desktop/WebDev/whatsapp-socketio/client/src/components/FriendsBar.js"],"names":["Divider","React","useEffect","useState","Friends","useSelector","useDispatch","ClickedUser","getMsgHistory","getFriendsLastChattedWith","FriendsBar","onClose","searchedUser","state","user","clickedUser","setUser","dispatch","loggedInUser","data","roomName","setRoomName","onClickHandler","loggedInUserUserId","userId","parseInt","name"],"mappings":";;;AAAA;AACA,SAASA,OAAT,QAAwB,mBAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,yBAAT,QAA0C,oCAA1C;;;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAiC;AAAA;;AAC/B,QAAMC,YAAY,GAAGP,WAAW,CAAEQ,KAAD;AAAA;;AAAA,kCAAWA,KAAK,CAACD,YAAjB,wDAAW,oBAAoBE,IAA/B;AAAA,GAAD,CAAhC;AACA,QAAMC,WAAW,GAAGV,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACE,WAAN,CAAkBD,IAA9B,CAA/B;AACA,QAAM,CAACA,IAAD,EAAOE,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMc,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,YAAY,GAAGb,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWK,IAAX,CAAgBA,IAAhB,CAAqBL,IAAjC,CAAhC,CAL+B,CAM/B;;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,IAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACR,yBAAyB,EAA1B,CAAR;AACD,GAFQ,EAEN,CAACM,WAAD,CAFM,CAAT;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACU,YAAL,EAAmB;AACjBI,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD,KAFD,MAEO;AACLA,MAAAA,OAAO,CAACJ,YAAY,CAACO,IAAd,CAAP;AACD;AACF,GANQ,EAMN,CAACP,YAAD,CANM,CAAT;AAQAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,WAAW,IAAIK,QAAnB,EAA6B;AAC3BH,MAAAA,QAAQ,CAACT,aAAa,CAACY,QAAD,CAAd,CAAR;AACD;AACF,GAJQ,EAIN,CAACL,WAAD,EAAcK,QAAd,CAJM,CAAT;;AAMA,QAAME,cAAc,GAAG,MAAM;AAC3BL,IAAAA,QAAQ,CAACV,WAAW,CAACK,YAAY,CAACO,IAAd,CAAZ,CAAR;AACAR,IAAAA,OAAO;AACP,UAAMY,kBAAkB,GAAGL,YAAY,CAACM,MAAxC;AAEA,QAAIJ,QAAQ,GACVK,QAAQ,CAACF,kBAAD,EAAqB,EAArB,CAAR,GAAmCE,QAAQ,CAACb,YAAY,CAACO,IAAb,CAAkBK,MAAnB,EAA2B,EAA3B,CAD7C;AAEAH,IAAAA,WAAW,CAACD,QAAD,CAAX;AACD,GARD;;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,cACGN,IAAI,gBACH;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAqC,MAAA,OAAO,EAAEQ,cAA9C;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,IAAI,EAAER,IAAI,CAACY;AAApB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,gBAKD;AAAA,6BAAE;AAAA;AAAA;AAAA;AAAA;AAAF;AANN;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA/CQhB,U;UACcL,W,EACDA,W,EAEHC,W,EACID,W;;;KALdK,U;AAiDT,eAAeA,UAAf","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { Divider } from '@chakra-ui/layout';\nimport React, { useEffect, useState } from 'react';\nimport Friends from './Friends';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ClickedUser } from '../redux/actions/userActions';\nimport { getMsgHistory } from '../redux/actions/msgsActions';\nimport { getFriendsLastChattedWith } from '../redux/actions/friendsListAction';\n\nfunction FriendsBar({ onClose }) {\n  const searchedUser = useSelector((state) => state.searchedUser?.user);\n  const clickedUser = useSelector((state) => state.clickedUser.user);\n  const [user, setUser] = useState({});\n  const dispatch = useDispatch();\n  const loggedInUser = useSelector((state) => state.user.data.data.user);\n  // const friendsList = useSelector((state) => state.friendsList.data.data);\n  const [roomName, setRoomName] = useState(null);\n\n  useEffect(() => {\n    dispatch(getFriendsLastChattedWith());\n  }, [clickedUser]);\n\n  useEffect(() => {\n    if (!searchedUser) {\n      setUser(null);\n    } else {\n      setUser(searchedUser.data);\n    }\n  }, [searchedUser]);\n\n  useEffect(() => {\n    if (clickedUser && roomName) {\n      dispatch(getMsgHistory(roomName));\n    }\n  }, [clickedUser, roomName]);\n\n  const onClickHandler = () => {\n    dispatch(ClickedUser(searchedUser.data));\n    onClose();\n    const loggedInUserUserId = loggedInUser.userId;\n\n    let roomName =\n      parseInt(loggedInUserUserId, 36) * parseInt(searchedUser.data.userId, 36);\n    setRoomName(roomName);\n  };\n\n  return (\n    <div className=\"friends-bar\">\n      {user ? (\n        <div className=\"friends-bar-single1\" onClick={onClickHandler}>\n          <Friends name={user.name} />\n          <Divider />\n        </div>\n      ) : <><p></p></>}\n    </div>\n  );\n}\n\nexport default FriendsBar;\n"]},"metadata":{},"sourceType":"module"}