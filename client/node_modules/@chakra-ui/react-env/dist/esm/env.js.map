{"version":3,"sources":["../../src/env.tsx"],"names":["React","useMemo","useState","createContext","useContext","ssrWindow","ssrDocument","mockEnv","window","document","defaultEnv","EnvironmentContext","displayName","useEnvironment","EnvironmentProvider","props","children","environment","environmentProp","node","setNode","context","doc","ownerDocument","win","defaultView","nodeEnv","env","shouldRenderChildren","el"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCC,aAAnC,EAAkDC,UAAlD,QAAoE,OAApE;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAOA,IAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAEH,SADM;AAEdI,EAAAA,QAAQ,EAAEH;AAFI,CAAhB;AAKA,IAAMI,UAAuB,GAC3B,OAAOF,MAAP,KAAkB,WAAlB,GAAgC;AAAEA,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAhC,GAAuDF,OADzD;AAGA,IAAMI,kBAAkB,gBAAGR,aAAa,CAACO,UAAD,CAAxC;AACAC,kBAAkB,CAACC,WAAnB,GAAiC,oBAAjC;AAEA,OAAO,SAASC,cAAT,GAA0B;AAC/B,SAAOT,UAAU,CAACO,kBAAD,CAAjB;AACD;AAOD,OAAO,SAASG,mBAAT,CAA6BC,KAA7B,EAA8D;AACnE,MAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,WAAW,EAAEC;AAAzB,MAA6CH,KAAnD;AACA,MAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAqB,IAArB,CAAhC;AAEA,MAAMmB,OAAO,GAAGpB,OAAO,CAAC,MAAM;AAAA;;AAC5B,QAAMqB,GAAG,GAAGH,IAAH,oBAAGA,IAAI,CAAEI,aAAlB;AACA,QAAMC,GAAG,GAAGL,IAAH,oBAAGA,IAAI,CAAEI,aAAN,CAAoBE,WAAhC;AACA,QAAMC,OAAO,GAAG;AAAEjB,MAAAA,QAAQ,EAAEa,GAAZ;AAAiBd,MAAAA,MAAM,EAAEgB;AAAzB,KAAhB;AACA,QAAMG,GAAG,WAAGT,eAAH,WAAGA,eAAH,GAAsBQ,OAAtB,mBAAiChB,UAA1C;AACA,WAAOiB,GAAP;AACD,GANsB,EAMpB,CAACR,IAAD,EAAOD,eAAP,CANoB,CAAvB;AAQA,MAAMU,oBAAoB,GAAGT,IAAI,IAAID,eAArC;AAEA,sBACE,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEG;AAApC,KACGO,oBAAoB,GACnBZ,QADmB,gBAGnB;AACE,IAAA,GAAG,EAAGa,EAAD,IAAQ;AACX,UAAIA,EAAJ,EAAQT,OAAO,CAACS,EAAD,CAAP;AACT;AAHH,IAJJ,CADF;AAaD","sourcesContent":["import React, { useMemo, useState, createContext, useContext } from \"react\"\nimport { ssrWindow } from \"./mock-window\"\nimport { ssrDocument } from \"./mock-document\"\n\ninterface Environment {\n  window: Window\n  document: Document\n}\n\nconst mockEnv = {\n  window: ssrWindow,\n  document: ssrDocument,\n}\n\nconst defaultEnv: Environment =\n  typeof window !== \"undefined\" ? { window, document } : mockEnv\n\nconst EnvironmentContext = createContext(defaultEnv)\nEnvironmentContext.displayName = \"EnvironmentContext\"\n\nexport function useEnvironment() {\n  return useContext(EnvironmentContext)\n}\n\nexport interface EnvironmentProviderProps {\n  children: React.ReactNode\n  environment?: Environment\n}\n\nexport function EnvironmentProvider(props: EnvironmentProviderProps) {\n  const { children, environment: environmentProp } = props\n  const [node, setNode] = useState<HTMLElement | null>(null)\n\n  const context = useMemo(() => {\n    const doc = node?.ownerDocument\n    const win = node?.ownerDocument.defaultView\n    const nodeEnv = { document: doc, window: win }\n    const env = environmentProp ?? nodeEnv ?? defaultEnv\n    return env as Environment\n  }, [node, environmentProp])\n\n  const shouldRenderChildren = node || environmentProp\n\n  return (\n    <EnvironmentContext.Provider value={context}>\n      {shouldRenderChildren ? (\n        children\n      ) : (\n        <span\n          ref={(el) => {\n            if (el) setNode(el)\n          }}\n        />\n      )}\n    </EnvironmentContext.Provider>\n  )\n}\n"],"file":"env.js"}